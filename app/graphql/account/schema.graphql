"""
@file account.schema.graphql
@description 定义了与 accounts 表相关的 GraphQL Schema，描述用户账户信息及其相关操作。

主要功能:
- 扩展 User 聚合，归类 User 中只涉及到 accouts 表的查询或突变。

注意:
- 请确保在使用此 Schema 时，理解 User 和 Account 的职责边界，以便更好地维护和扩展。
- 如果使用自定义类型（如 DateTime 和 JSON），请确保在 app/graphql/common/schema.graphql 中定义相应类型。
"""

type Account {
  id: Int!
  loginEmail: String!
  loginName: String!
  Status: AccountStatus!
}



# 用户状态枚举类型
enum AccountStatus {
  # 活跃状态
  ACTIVE
  # 被封禁状态
  BANNED
  # 被删除状态
  DELETED
  # 待激活状态
  PENDING
  # 已暂停状态
  SUSPENDED
  # 不活跃状态
  INACTIVE
}

# 登录记录
type LoginHistory {
  # 登录时间
  loginTime: DateTime!
  # 登录 IP
  loginIP: String!
}

# 用户 Login 时的查询参数
input LoginParams {
  # 登录名或邮箱
  loginName: String!
  # 登录密码
  loginPassword: String!
  # 登录类型
  type: String
}



# # 修改参数
# input UpdateParams {
#   # 用户 ID
#   id: ID!
#   # 账号名
#   loginName: String
#   # 账号 Email
#   loginEmail: String
#   # 密码
#   loginPassword: String
# }

# # 插入参数
# input InsertParams {
#   # 账号名
#   loginName: String
#   # 账号 Email
#   loginEmail: String
#   # 密码
#   loginPassword: String!
#   # 员工工号
#   # 请注意，此处的员工工号并非 account 数据库的字段，
#   # 而是 staff 数据库的字段，需要在 service 里进一步操作
#   jobId: Int!
# }

# 用户 resetPassword 时的查询参数
input ResetPasswordInput {
  # 验证字符串
  verifCode: String!
  # 新密码
  newPassword: String!
}  

# 修改结果
extend type Mutation {
  # 修改用户账户信息
  # updateAccount(params: UpdateParams!): Account
  # 重置用户密码
  userResetPassword(input: ResetPasswordInput!): Boolean
} 

# 查询结果
extend type Query {
  """
  用户登录检查（userLoginCheck）查询逻辑现在由 app/graphql/account 中的 resolver 处理。
  虽然从逻辑上它属于 User 聚合的一部分，取名的时候也特意用 user 前缀表示这个关系
  但因为这次操作只涉及到 account 表，所以我将定义和实现都放在了 Account 模块中。
  这样做的好处是不用维护一个未来会特别臃肿的 User 模块。
  但也可能让人对 User 和 Accout 的逻辑关系产生困惑，以为他是平级的，特此说明。
  """
  userLoginCheck(params: LoginParams): JSON

  # 根据 loginEmail 字段查询用户信息
  userByLoginEmail(loginEmail: String!): Account
}