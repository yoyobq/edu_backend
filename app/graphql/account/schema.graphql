"""
@file schema.graphql
@description 定义GraphQL模式，描述用户账户相关的类型、输入参数、查询和变更。

主要功能:
- 定义Account类型，描述用户账户信息。
- 定义LoginHistory类型，描述登录记录。
- 定义QueryParams、LoginParams、UpdateParams和InsertParams输入类型，用于查询和变更操作。
- 扩展Query和Mutation类型，添加与用户账户相关的查询和变更操作。

补充说明:
- 当你使用一些第三方的库来实现自定义类型时，需要在 GraphQL Schema 文件中定义这个类型。
- 例如本文档里的 DateTime 和 JSON
-- 请检查公共文件 app/graphql/common/sehema.graphql 检查类型的定义
"""

# 用户账户信息
type Account {
  # 用户 ID
  id: ID!
  # 账号名
  loginName: String
  # 账号 Email
  loginEmail: String!
  # 最近 5 次登录记录
  recentLoginHistory: [LoginHistory]
  # 创建时间
  createdAt: DateTime!
  # 更新时间
  updatedAt: DateTime!
  # 用户状态 "ACTIVE"、"BANNED"、"DELETED"、"PENDING"、"SUSPENDED"、"INACTIVE"
  status: AccountStatus
}

# 用户状态枚举类型
enum AccountStatus {
  # 活跃状态
  ACTIVE
  # 被封禁状态
  BANNED
  # 被删除状态
  DELETED
  # 待激活状态
  PENDING
  # 已暂停状态
  SUSPENDED
  # 不活跃状态
  INACTIVE
}

# 登录记录
type LoginHistory {
  # 登录时间
  loginTime: DateTime!
  # 登录 IP
  loginIP: String!
}

# 查询参数
input QueryParams {
  # 搜索关键字
  keyword: String
  # 分页参数
  pagination: PaginationInput
}

input LoginParams {
  loginName: String!
  loginPassword: String!
  type: String!
}

# 修改参数
input UpdateParams {
  # 用户 ID
  id: ID!
  # 账号名
  loginName: String
  # 账号 Email
  loginEmail: String
  # 密码
  loginPassword: String
}

# 插入参数
input InsertParams {
  # 账号名
  loginName: String
  # 账号 Email
  loginEmail: String
  # 密码
  loginPassword: String!
  # 员工工号
  # 请注意，此处的员工工号并非 account 数据库的字段，
  # 而是 staff 数据库的字段，需要在 service 里进一步操作
  jobId: Int!
}

# 分页参数
input PaginationInput {
  # 当前页码
  current: Int!
  # 每页数量
  pageSize: Int!
}

# 修改结果
extend type Mutation {
  # 修改用户账户信息
  updateAccount(params: UpdateParams!): Account
  # 插入新的用户账户信息
  insertAccount(params: InsertParams!): Account
} 

# 查询结果
extend type Query {
  # 查询用户账户信息列表
  accounts(params: String): [Account]!
  # 此处带参数的 UserAccount 查询，可以根据id返回包含了某个用户的具体信息的对象
  account(id: Int): Account
  # 可以根据id返回包含了某个用户的具体信息的对象
  accountByLoginEmail(loginEmail: String): Account
  # 查询是否存在用户名密码对，确认用户登录信息
  checkAccount(params: LoginParams): JSON
}